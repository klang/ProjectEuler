(ns problem297
  (meta {:description "Each new term in the Fibonacci sequence is generated by adding the previous two terms.
Starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.

Every positive integer can be uniquely written as a sum of nonconsecutive terms of the Fibonacci sequence. For example, 100 = 3 + 8 + 89.
Such a sum is called the Zeckendorf representation of the number.

For any integer n>0, let z(n) be the number of terms in the Zeckendorf representation of n.
Thus, z(5) = 1, z(14) = 2, z(100) = 3 etc.
Also, for 0<n<10^6, ∑ z(n) = 7894453.

Find ∑ z(n) for 0<n<10^17."
	 :observations "F83 < 10^17 < F84"})
  (:use clojure.contrib.lazy-seqs
	[clojure.contrib.seq-utils :only (indexed)]
	clojure.contrib.math
	clojure.test))

(def hard-fibs (into [] (take-while #(< %(expt 10 17)) (drop 2 (fibs)))))
(def hard-fibs-reverse (into [] (reverse (take-while #(< %(expt 10 17)) (drop 2 (fibs))))))


(defn zeckendorf-hard [number]
  (loop [number number catch (transient [])]
    (if (zero? number) (persistent! catch)
      (let [n (first (drop-while #(< number %) hard-fibs-reverse))]
	(recur (- number n) (conj! catch n))))))

(defn zeckendorf-terms-hard [number]
  (loop [number number terms 0]
    (if (zero? number) terms
      (let [n (first (drop-while #(< number %) hard-fibs-reverse))]
	(recur (- number n) (inc terms))))))

(deftest test-zeckendorf-hard 
  (is (= [89 8 3] (zeckendorf-hard 100)))
  (is (= 3 (zeckendorf-terms-hard 100))))

(defn zeckendorf [number]
  (loop [number number catch (transient [])]
    (if (zero? number) (persistent! catch)
      (let [n (last (take-while #(<= % number) (fibs)))]
	(recur (- number n) (conj! catch n))))))

(defn zeckendorf-terms [number]
  (loop [number number terms 0]
    (if (zero? number) terms
      (let [n (last (take-while #(<= % number) (fibs)))]
	(recur (- number n) (inc terms))))))

(deftest test-zeckendorf 
  (is (= 1 (zeckendorf-terms 5)))
  (is (= 2 (zeckendorf-terms 14)))
  (is (= 3 (zeckendorf-terms 100)))
  (is (= [89 8 3] (zeckendorf 100)))
  (is (= 3 (zeckendorf-terms 100)))
  #_(is (= 7894453
	   (reduce + (take (expt 10 6) 
			   (map #(zeckendorf-terms-hard %) 
				(iterate inc 1)))))))

(defn F [n]
  "Stack consuming fibo, Programming Clojure, p.133"
  (cond 
    (< n 0) 0
    (= n 0) 0
    (= n 1) 1
    :else
    (+ (F (- n 1)) (F (- n 2)))))

(defn Zr [n]
  (cond
    (= n 0) 1
    (= n 1) 1
    :else
    (+ (Zr (- n 1)) (Zr (- n 2)) (F (- n 1)))))

(defn fibos []
  "Christophe Grand's lazy fibonacci sequence, also available in clojure.contrib.lazy-seqs"
  (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))

(defn Z []
  "Christophe Grand's lazy fibonacci sequence again .. "
  (map first (iterate (fn [[z2 z1 f2 f1 ]] [z1 (+ z2 z1 f1) f1 (+ f2 f1)]) [1 1 0 1])))

(deftest test-Zzz
  (is (= (map #(Zr %) (range 0 14))
	 '(1 1 3 5 10 18 33 59 105 185 324 564 977 1685)
	 (take 14 (Z)))))

(defn find-index [fib-num]
  "find the index of a given fibonacci number" 
  (first (first (filter #(= (second %) fib-num) (indexed hard-fibs)))))

(deftest test-zeckendorf-sums
  ;; when the target is a fibonacci number 
  (is (= (reduce + (take (dec 987) (map #(zeckendorf-terms-hard %) (iterate inc 1))))
	 (reduce + [1 1 3 5 10 18 33 59 105 185 324 564 977 1685])
	 3970
	 (reduce + (take 14 (Z)))
	 (reduce + (take (find-index 987) (Z)))))
  ;; when the target is not a fibonacci number
  (is (= (nth (Z) (inc (find-index  (- 1000 (last (take-while #(<= % 1000) (fibs)))))))
	 33
	 (+ 1 2 2 2 3 2 3 3 2 3 3 3 4)))
  ;; 
  (is (= (reduce + (take (dec 1000) (map #(zeckendorf-terms-hard %) (iterate inc 1))))
	 4003
	 (+ 3970 33)
	 ;; (zeckendorf-hard 1000) => [987 13]
	 (+ (reduce + (take (find-index 987) (Z)))
	    (nth (Z) (inc (find-index 13))))
	 ))
  ;;
  (is (= (reduce + (take (dec 10000) (map #(zeckendorf-terms-hard %) (iterate inc 1))))
	 52810
	 ;; (zeckendorf-hard 10000) => [6765 2584 610 34 5 2]
	 (+ (reduce + (take (find-index 6765) (Z)))
	    ;; 18120 --> 3235 terms (+ 2584 610 34 5 2) from the next group
	    ;;                      (+ 14406 3505 173 25 11)
	    ;; (reduce + (take 3235 (group (inc (inc (inc (find-index 2584)))))))
	    ;; 18123
	    (nth (Z) (inc (find-index 2584) )) 
	    (nth (Z) (inc (find-index 610) ))
	    (nth (Z) (inc (find-index 34) ))
	    (nth (Z) (inc (find-index 5) ))
	    (nth (Z) (inc (find-index 2) ))
	    )
	 ))
  )



(comment
  (defn F [n] (nth hard-fibs (dec n)))
  (take (- 987 609) (drop 610 (map #(zeckendorf-terms-hard %) (iterate inc 1))))
  ;; the 377 terms in the group from 610 to 987
  (count (take (- 986 609) (drop 609 (map #(zeckendorf-terms-hard %) (iterate inc 1)))))
  (nth hard-fibs 5))

(comment
  (defn find-index [fib-num]
    "find the index of a given fibonacci number" 
    (inc (first (first (filter #(= (second %) fib-num) (indexed hard-fibs)))))))

(defn group [nth-fib]
  "returns the length of the zeckendorf terms for the group leading up to the nth fibonacci number.
Counting from zero in [1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 .. ]"
  (take (- (dec (nth hard-fibs nth-fib)) 
	   (dec (nth hard-fibs (dec nth-fib))))
	(drop (dec (nth hard-fibs (dec nth-fib)))
	      (map #(zeckendorf-terms-hard %) (iterate inc 1)))))
;; do we have to iterate from 1?
(defn group [nth-fib]
  "returns the length of the zeckendorf terms for the group leading up to the nth fibonacci number.
Counting from zero in [1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 .. ]"
  (take (- (dec (nth hard-fibs nth-fib)) 
	   (dec (nth hard-fibs (dec nth-fib))))
	(map #(zeckendorf-terms-hard %) (iterate inc (dec (nth hard-fibs (dec nth-fib)))))))

(defn flatten-once [s] (remove seq? (tree-seq seq? seq s)))

(comment
  (def g14 (group 14))
  (reduce + (flatten-once (map #(take % g14) [1 1 2 3 5 8 13 21 34 55 89 144 233 377])))
  ;; 3970
  (reduce + (take 986 (map #(zeckendorf-terms-hard %) (iterate inc 1))))
  ;; 3970
  (first (reverse (take-while #(< %(expt 10 6)) (drop 2 (fibs)))))
  ;;832040
)


(comment
  ;; the first fibonacci number under (expt 10 6)
  (def g29 (group (find-index 832040)))
  (reduce + (flatten-once (map #(take % g29) [1 1 2 3 5 8 13 21 34 55 89 144 233 377])))
  ;; 3970
  (reduce + (flatten-once (map #(take % g29) (lazy-cat '(1) (take (- (find-index 832040) 2) hard-fibs)))))
  ;; taking a group of almost a million number takes too long
)

(comment
[ 1 2 2 (+ 2 3) (+ 2 3 3) (+ 2 3 3 3 4) (+ 2 3 3 3 4 3 4 4) (+ 2 3 3 3 4 3 4 4 3 4 4 4 5) (+ 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5)]
[(+ 1)
 (+ 1)
 (+ 1 2) 
 (+ 1 2 2) 
 (+ 1 2 2 2 3) 
 (+ 1 2 2 2 3 2 3 3 )
 (+ 1 2 2 2 3 2 3 3 2 3 3 3 4 )
 (+ 1 2 2 2 3 2 3 3 2 3 3 3 4 2 3 3 3 4 3 4 4 )
 (+ 1 2 2 2 3 2 3 3 2 3 3 3 4 2 3 3 3 4 3 4 4 2 3 3 3 4 3 4 4 3 4 4 4 5)
 (+ 1 2 2 2 3 2 3 3 2 3 3 3 4 2 3 3 3 4 3 4 4 2 3 3 3 4 3 4 4 3 4 4 4 5 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5)
 (+ 1 2 2 2 3 2 3 3 2 3 3 3 4 2 3 3 3 4 3 4 4 2 3 3 3 4 3 4 4 3 4 4 4 5 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 3 4 4 4 5 4 5 5 4 5 5 5 6)
 (+ 1 2 2 2 3 2 3 3 2 3 3 3 4 2 3 3 3 4 3 4 4 2 3 3 3 4 3 4 4 3 4 4 4 5 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 3 4 4 4 5 4 5 5 4 5 5 5 6 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 3 4 4 4 5 4 5 5 4 5 5 5 6 3 4 4 4 5 4 5 5 4 5 5 5 6 4 5 5 5 6 5 6 6)
 (+ 1 2 2 2 3 2 3 3 2 3 3 3 4 2 3 3 3 4 3 4 4 2 3 3 3 4 3 4 4 3 4 4 4 5 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 3 4 4 4 5 4 5 5 4 5 5 5 6 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 3 4 4 4 5 4 5 5 4 5 5 5 6 3 4 4 4 5 4 5 5 4 5 5 5 6 4 5 5 5 6 5 6 6 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 3 4 4 4 5 4 5 5 4 5 5 5 6 3 4 4 4 5 4 5 5 4 5 5 5 6 4 5 5 5 6 5 6 6 3 4 4 4 5 4 5 5 4 5 5 5 6 4 5 5 5 6 5 6 6 4 5 5 5 6 5 6 6 5 6 6 6 7)
 (+ 1 2 2 2 3 2 3 3 2 3 3 3 4 2 3 3 3 4 3 4 4 2 3 3 3 4 3 4 4 3 4 4 4 5 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 3 4 4 4 5 4 5 5 4 5 5 5 6 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 3 4 4 4 5 4 5 5 4 5 5 5 6 3 4 4 4 5 4 5 5 4 5 5 5 6 4 5 5 5 6 5 6 6 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 3 4 4 4 5 4 5 5 4 5 5 5 6 3 4 4 4 5 4 5 5 4 5 5 5 6 4 5 5 5 6 5 6 6 3 4 4 4 5 4 5 5 4 5 5 5 6 4 5 5 5 6 5 6 6 4 5 5 5 6 5 6 6 5 6 6 6 7 2 3 3 3 4 3 4 4 3 4 4 4 5 3 4 4 4 5 4 5 5 3 4 4 4 5 4 5 5 4 5 5 5 6 3 4 4 4 5 4 5 5 4 5 5 5 6 4 5 5 5 6 5 6 6 3 4 4 4 5 4 5 5 4 5 5 5 6 4 5 5 5 6 5 6 6 4 5 5 5 6 5 6 6 5 6 6 6 7 3 4 4 4 5 4 5 5 4 5 5 5 6 4 5 5 5 6 5 6 6 4 5 5 5 6 5 6 6 5 6 6 6 7 4 5 5 5 6 5 6 6 5 6 6 6 7 5 6 6 6 7 6 7 7)]

[1 1 3 5 10 18 33 59 105 185 324 564 977 1685]
)

(run-tests)

