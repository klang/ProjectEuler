(ns problem044
  (meta {:description "Pentagonal numbers are generated by the formula, P(n)=n*(3n-1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference is pentagonal and D = |Pk - Pj| is minimised; what is the value of D?"})
  (:use clojure.contrib.math)
  (:use clojure.test)
  )

(def pentagonals ; (quot (* n (- (* 3 n) 1)) 2)
  (map (fn [n] (quot (- (* 3 n n) n) 2)) (iterate inc 1)))
(defn pentagonal [n] (quot (- (* 3 n n) n) 2))

; P(n)=n*(3n-1)/2
;; j*(3j-1)/2 - k*(3k-1)/2 = n*(3n-1)/2
;; and
;; j*(3j-1)/2 + k*(3k-1)/2 = m*(3m-1)/2

(defn p [n] (- (* 3 n n) n))
(def p (memoize p))
(defn pdif [j k] (- (p k) (p j)))
(defn psum [j k] (+ (p j) (p k)))


(defn parabola [a b c]
  (let [D (- (* b b) (* 4 a c))
	sqrtD (exact-integer-sqrt D)
	minus-b (* -1 b)
	two-a (* 2 a)
	] {:D D
	   :sqrtD sqrtD
	   :r1 (/  (+ minus-b (first sqrtD)) two-a)
	   :r2 (/  (- minus-b (first sqrtD)) two-a)}))
    ;(zero? (exact-integer-sqrt (- 1 (* 12 c))))

; (parabola 3 -1 (* -2 70))
; (parabola 3 -1 (* -2 7))

(defn pentagonal? [c]
  (let [D (- 1 (* -24 c))
	sqrtD (exact-integer-sqrt D)
	] {:D D 
	   :sqrtD sqrtD 
	   :r1 (/  (+ 1 (first sqrtD)) 6) 
	   :r2 (/  (- 1 (first sqrtD)) 6)
	   :pentagonal? (and (zero? (second sqrtD))
			     (integer? (/  (+ 1 (first sqrtD)) 6)))}))

(defn pentagonal? [c]
  (let [sqrtD (exact-integer-sqrt (- 1 (* -24 c)))]
      (and (zero? (second sqrtD))
	   (integer? (/  (+ 1 (first sqrtD)) 6)))))

(deftest test-pentagonal
  (is (pentagonal? 1))
  (is (pentagonal? 5))
  (is (not (pentagonal? 7)))
  (is (pentagonal? 12))
  (is (pentagonal? 22))
  (is (not (pentagonal? 57)))
  (is (pentagonal? 70))
  (is (pentagonal? 92)))

;; the pentagonal number, if pentagonal? returns true
(defn pentagonal-n [c]
  (let [sqrtD (exact-integer-sqrt (- 1 (* -24 c)))]
    (if (and (zero? (second sqrtD))
	   (integer? (/  (+ 1 (first sqrtD)) 6)))
      (/  (+ 1 (first sqrtD)) 6)
      false)))

(defn pdiff [n] (take-while #(not (zero? %)) (map #(- n %) pentagonals)))
(defn psum [n] (take-while #(not (zero? %)) (map #(+ n %) pentagonals)))
;;(take 10 (map #(pdiff %) pentagonals))
;;(map println (take 10 (map #(pdiff %) pentagonals)))

(apply str (map println (take 10 (map #(pdiff %) pentagonals))))
;; (1 5 12 22 35 51 70 92 117 145)
;; ()
;; (4)
;; (11 7)
;; (21 17 10)
;; (34 30 23 13)
;; (50 46 39 29 16)
;; (69 65 58 48 35 19)
;; (91 87 80 70 57 41 22)
;; (116 112 105 95 82 66 47 25)
;; (144 140 133 123 110 94 75 53 28)


;;(take 10 (map #(filter pentagonal? %) (map #(pdiff %) pentagonals)))

(defn pdiff [n] (take-while #(not (zero? %)) (map #(- n %) pentagonals)))
(apply str (map println (take 10 (map #(pdiff %) pentagonals))))

(defn findD []
  (loop ))